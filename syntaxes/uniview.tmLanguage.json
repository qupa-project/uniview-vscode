{
	"name": "Uniview",
	"scopeName": "source.uv",
	"patterns": [
		{"include": "#comment"},
		{"include": "#constant"},
		{"include": "#punctuation"},
		{"include": "#external"},
		{"include": "#keyword"},
		{"include": "#opperator"},
		{"include": "#call"},
		{"include": "#function"},
		{"include": "#structure"},
		{"include": "#declare"}
	],
	"repository": {
		"constant": {
			"name": "constant",
			"patterns": [
				{ "include": "#string" },
				{ "include": "#constant.numeric"},
				{ "name": "constant.language.true", "match" : "true" },
				{ "name": "constant.language.false", "match" : "false" }
			]
		},
		"constant.numeric": {
			"name": "constant.numeric",
			"patterns": [
				{
					"match": "23"
				},
				{
					"name": "constant.numeric.hexadecimal",
					"match": "(0x)([0-9A-Fa-f]+)",
					"captures": {
						"1": { "name": "keyword.other.unit.hexadecimal" }
					}
				},
				{
					"name": "constant.numeric.octagonal",
					"match": "(0o)([0123]+)",
					"captures": {
						"1": { "name": "keyword.other.unit.hexadecimal" }
					}
				},
				{
					"name": "constant.numeric.binary",
					"match": "(0b)([1|0]+)",
					"captures": {
						"1": { "name": "keyword.other.unit.hexadecimal" }
					}
				},
				{
					"name": "constant.numeric.decimal.point",
					"match": "(\\-)?([1-9][0-9]*|[0])(\\.)([0-9])+((e)(-)?([0-9]+))?",
					"captures": {
						"1": { "name": "keyword.operator" },
						"5": { "name": "keyword.other.unit.exponent.decimal" },
						"6": { "name": "keyword.operator" }
					}
				},
				{
					"name": "constant.numeric.decimal",
					"match": "(\\-)?(([1-9][0-9]*)|[0])",
					"captures": {
						"1": { "name": "keyword.operator" }
					}
				}
			]
		},

		"comment": {
			"patterns": [
				{ "include": "#inline_comment" },
				{ "include": "#multi_comment" }
			]
		},
		"multi_comment": {
			"name": "comment.block.uv",
			"begin": "\\/\\*",
			"end": "\\*\\/"
		},
		"inline_comment": {
			"name": "comment.block.uv",
			"match": "(\\/\\/)(.*?)(\n)"
		},

		"string": {
			"patterns": [
				{ "include": "#string.single" },
				{ "include": "#string.double" }
			]
		},
		"string.double": {
			"name": "string.quoted.double",
			"match": "(\")(.*?)(\")"
		},
		"string.single": {
			"name": "string.single.double",
			"match": "(')(.*?)(')"
		},

		"punctuation": {
			"name": "punctuation",
			"patterns": [
				{"name": "punctuation.separator.delimiter.comma", "match": "," },
				{"name": "punctuation.terminator.statement", "match": ";" },
				{"name": "punctuation.definition.block", "match": "(\\{|\\})" },
				{"name": "meta.brace.round", "match": "(\\(|\\))" }
			]
		},

		"external": {
			"name": "meta.storage",
			"begin": "\\b(external)\\s+(export|assume)\\s*{",
			"beginCaptures": {
				"1": {
					"name": "storage.type.extern"
				},
				"2": {
					"name": "keyword.storage"
				}
			},
			"end": "}",
			"patterns": [
				{"include": "#function.redirect"},
				{"include": "#function.head"},
				{"include": "#comment"}
			]
		},

		"declare": {
			"patterns": [
				{
					"name": "declare",
					"comment": "",
					"begin": "\\b(let)\\s+([A-Za-z0-9_]*)(\\:\\s([A-Za-z0-9_]+))?\\s(=)",
					"beginCaptures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "variable"
						},
						"4": {
							"name": "storage.type"
						},
						"5": {
							"name": "keyword.operator"
						}
					},
					"end": "(;)",
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator.statement"
						}
					},
					"patterns": [
						{ "include": "#expression" },
						{ "include": "#opperator" },
						{ "include": "#string" }
					]
				}
			]
		},

		"function": {
			"patterns": [
				{
					"name": "meta.function.uv",
					"begin": "\\b(fn)\\s+([A-Za-z0-9_]+)\\((.*)\\)\\s*((\\:)\\s([A-Za-z0-9_]+))?\\s*{",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"patterns": [
								{
									"include": "#function.parameter"
								}
							]
						},
						"5": {
							"name": "keyword.operator"
						},
						"6": {
							"name": "storage.type"
						}
					},
					"end": "\\}",
					"patterns": [
						{"include": "#comment"},
						{"include": "#constant"},
						{"include": "#punctuation"},
						{"include": "#keyword"},
						{"include": "#opperator"},
						{"include": "#call"},
						{"include": "#declare"}
					]
				}
			]
		},
		"function.parameter": {
			"patterns": [
				{
					"name": "variable.parameter",
					"match": "\\b([A-Za-z0-9_]+)\\s*(:)\\s*(@)?([A-Za-z0-9_\\.]+)\\s*(,)?",
					"captures": {
						"1": {
							"name": "variable.parameter"
						},
						"2": {
							"name": "keyword.opperator"
						},
						"3": {
							"name": "keyword.operator"
						},
						"4": {
							"name": "storage.type"
						},
						"5": {
							"name": "punctuation.separator.parameter"
						}
					}
				}
			]
		},
		"function.head": {
			"patterns": [
				{
					"name": "meta.function.uv",
					"match": "\\b(fn)\\s+([A-Za-z0-9_]+)\\s*\\((.*)\\)\\s*((\\:)\\s*([A-Za-z0-9_]+))?\\s*;",
					"captures": {
						"1": {
							"name": "storage.type.function"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"patterns": [
								{
									"include": "#function.parameter"
								}
							]
						},
						"5": {
							"name": "keyword.operator"
						},
						"6": {
							"name": "storage.type"
						}
					}
				}
			]
		},
		"function.redirect": {
			"patterns": [
				{
					"name": "meta.function.uv",
					"match": "\\b(fn)\\s+(\"[A-Za-z0-9_\\.]+\")\\s+\\((.*)\\)\\s*((\\:)\\s*([A-Za-z0-9_]+))?\\s+(as)\\s+([A-Za-z0-9_]+)\\s*;",
					"captures": {
						"1": {
							"name": "storage.type.function"
						},
						"2": {
							"name": "string.quoted.double"
						},
						"3": {
							"patterns": [
								{
									"include": "#function.parameter"
								}
							]
						},
						"5": {
							"name": "keyword.operator"
						},
						"6": {
							"name": "storage.type"
						},
						"7": {
							"name": "keyword.storage"
						},
						"8": {
							"name": "entity.name.function"
						}
					}
				}
			]
		},

		"structure": {
			"patterns": [
				{
					"name": "meta.block.struct",
					"begin": "\\b(struct)\\s+([A-Za-z0-9_]+)\\s*{",
					"beginCaptures": {
						"1": {
							"name": "storage.type.struct"
						},
						"2": {
							"name": "entity.name.type"
						}
					},
					"end": "}",
					"patterns": [
						{
							"name": "meta.body.struct",
							"match": "\\b([A-Za-z0-9_]+)\\s*(:)\\s*([A-Za-z0-9_\\.]+)(;)",
							"captures": {
								"1": {
									"name": "variable"
								},
								"2": {
									"name": "keyword.opperator"
								},
								"3": {
									"name": "storage.type"
								},
								"4": {
									"name": "punctuation.terminator.statement"
								}
							}
						},
						{
							"include": "#comment"
						}
					]
				}
			]
		},

		"call": {
			"patterns": [
				{
					"name": "function.call",
					"begin": "\\b([A-Za-z0-9_\\.]*)\\s*((#)\\[(.*?)\\])?\\s*\\(",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						},
						"2": {
							"name": "keyword.storage"
						},
						"4": {
							"name": "meta.template.call",
							"patterns": [
								{
									"name": "entity.name.type",
									"match": "([A-Za-z0-9_\\.]*)"
								},
								{
									"name": "punctuation.separator.comma",
									"match": ","
								}
							]
						}
					},
					"end": "\\)",
					"patterns": [
						{ "include": "#expression" }
					]
				}
			]
		},

		"keyword": {
			"patterns": [
				{
					"name": "keyword.control",
					"match": "\\b(if|elif|else|for|break|continue|import)[\\s\\;]"
				},
				{
					"name": "keyword.control.import",
					"match": "\\b(import)\\b"
				},
				{
					"name": "keyword.control.flow",
					"match": "\\breturn\\b[\\s\\;]"
				}
			]
		},
		"opperator": {
			"patterns": [
				{
					"name": "keyword.operator",
					"match": "\\@|\\$|\\~"
				},
				{
					"name": "keyword.operator.arithmetic",
					"match": "\\-|\\+|\\=|\\*|\\/|\\%"
				},
				{
					"name": "keyword.operator.logical",
					"match": "\\&\\&|\\|\\|"
				},
				{
					"name": "punctuation.separator.comma",
					"match": ","
				}
			]
		},

		"expression": {
			"patterns": [
				{ "include": "#call" },
				{ "include": "#opperator" },
				{ "include": "#string" },
				{ "include": "#constant" }
			]
		}
	}
}